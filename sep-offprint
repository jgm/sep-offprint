#!/usr/bin/perl -w
#
# sep-offprint 0.7 - John MacFarlane - January 23, 2007
#   + fixed script to include supplements, if present (thanks to Dan Robins)
#   + hyperlinks now marked in blue (Dan Robins)
#   + removed unnecessary call to lwp-rget (Dan Robins)
#   + added error checking:  error exit if index.html not found
#
# sep-offprint 0.6 - John MacFarlane - August 30, 2006
# sep-offprint 0.5 - John MacFarlane - August 25, 2006
# sep-offprint 0.4 - John MacFarlane - August 22, 2006
# sep-offprint 0.3 - John MacFarlane - May 25, 2005
#
# produces a PDF or postscript "offprint" of a Stanford 
# Encyclopedia of Philosophy (SEP) article
#
# Argument is an entry name from SEP, as it appears in the URL.
# For example, to get the article on classical logic, which is at
# http://plato.stanford.edu/entries/logic-classical/, just type
#
#   perl sep-offprint logic-classical
#
# and it will create logic-classical.pdf.
#
# There are many command-line options.  For a list, type
#
#   perl sep-offprint --help
#
# The programs html2ps and ps2pdf must be in the user's path:
#
# html2ps can be found at http://user.it.uu.se/~jan/html2ps.html.
# Download the tarball or zip file and run the "install" script.
#
# ps2pdf is part of Ghostscript -- many users will have it
# already:  http://www.cs.wisc.edu/~ghost/doc/AFPL/get851.htm
#
# In addition, the LWP package for Perl must be installed.
#
# For more information and updates, see 
# http://philosophy.berkeley.edu/macfarlane/sep-offprint.html

use Getopt::Long;
use File::Temp qw/ tempdir /;
use File::Copy;
use Cwd;

sub printhelp {
    die 
"Produces a PDF offprint from a Stanford Encyclopedia of Philosophy article.
(http://plato.stanford.edu/)

Usage:                 sep-offprint [options] <entry name>

Examples:              sep-offprint russell
                       sep-offprint frege russell wittgenstein
                       sep-offprint --1up --ps --paper a4 frege
                       sep-offprint --1up --fontfamily Helvetica frege

Options:

--1up                  print one page per sheet, portrait orientation
--2up                  print two pages per sheet, landscape orientation (default) 
--ps                   produce postscript (PS) output
--pdf                  produce PDF output (default)
--font <font>          use <font> (Times, Helvetica, Palatino, Courier) (default Times)
--size <size>          use <size> (10pt, 12pt, 14pt, 16pt) (default 14pt)
--align <align>        use <align> (left, justified) (default justified)
--paper <papersize>    specify <papersize> (letter, legal, a4) (default letter)
--localpath <path>     look for entry in a subdirectory of <path> on local filesystem
--help                 this message
--version              prints version number\n";
}

GetOptions( '1up|1' => \$oneup,
            '2up|2' => \$twoup,
            'ps' => \$ps,
            'pdf' => \$pdf,
            'font=s' => \$fontfamily,
            'size=s' => \$fontsize,
            'align=s' => \$textalign,
            'paper=s' => \$papersize,
            'localpath=s' => \$localpath,
            'help|h' => \$help,
            'version|v' => \$version);

if ($#ARGV < 0) {&printhelp;};
$entryname = $ARGV[0];

# remove uppercase and spaces:
$entryname =~ tr/A-Z/a-z/;
$entryname =~ tr/ /-/;

# remove SEP url if specified:
$entryname =~ s{http://plato.stanford.edu/entries/}{};
# remove /index.html if specified:
$entryname =~ s{/.*}{};

if ($help) {&printhelp;};
if ($version) {die "sep-offprint ver. 0.6\n";}; 
if (not ($pdf or $ps)) {$pdf=1};
if ($oneup) {$twoup = 0} else {$twoup = 1};
if (not $fontsize) {$fontsize = "14pt"};
if (not $fontfamily) {$fontfamily = "Times"};
if (not $textalign) {$textalign = "justify"};
if (not $papersize) {$papersize = "letter"};

$temp = tempdir ( CLEANUP => 1 );

$current = getcwd;

# Get all the source files and put them in temp directory $temp

if ($localpath) {
    $footer = "$localpath/$entryname/";
    while (<$localpath/$entryname/*.*>) {
      copy($_,$temp)
    };
    chdir $temp;
    (-e "index.html") or die "Could not find index.html in $localpath/$entryname/";
} 
else {
    $footer = "http://plato.stanford.edu/entries/$entryname/";
    chdir $temp;
    system("lwp-rget --quiet http://plato.stanford.edu/entries/$entryname/index.html");
    (-e "index.html") or die "Could not download files from http://plato.stanford.edu/$entryname/"; 
};

# Create blank html file to work around html2ps bug.
#
# Without this blank file after notes.html, html2ps will cut off 
# the last page of an entry if it occurs in the left column in 2up mode.

$blank = "blankpage";

open FILE, ">$blank" or die "unable to open $blank: $!";

print FILE <<EOF; 
<html>
<head>
<title>&nbsp;</title>
</head>
<body>
<p>&nbsp;</p>
</body>
</html>
EOF

close FILE;

# Create a configuration file with appropriate footers
# and run html2ps and html2pdf on that argument.

$html2psrc = "html2psrc" . time;

open FILE, ">$html2psrc" or die "unable to open $html2psrc: $!";

print FILE <<EOF; 
BODY {
    font-size: $fontsize; 
    font-family: $fontfamily; 
    text-align: $textalign; 
}
A:link {
    color: blue;
}
\@page { 
    margin-left: 2.5cm; 
    margin-right: 2.5cm; 
    margin-top: 2.5cm; 
    margin-bottom: 2.5cm; 
}
\@html2ps { 
    option { 
        twoup: $twoup; 
        landscape: $twoup; 
        number: 0; 
    } 
    paper { type: $papersize } 
	header {
	    right: "STANFORD ENCYCLOPEDIA OF PHILOSOPHY";
		left: \$T;
    }
    footer {
        left: \$N;
        right: $footer;
    }
}
EOF

close FILE;

# name of temporary file to hold postscript output of html2ps
$pstemp = "pstemp";

# preprocess html: takes filename as parameter
# (1) remove navigation bars, etc.
# (2) replace &#9633; entity reference with appropriate image 

sub preprocess_html {
	my $file = $_;
	# slurp contents of file
	{
		local( $/, *FILE ); 
		open(FILE, "< $file") or die "Couldn't open $file to read";
		$contents = <FILE>;
		close(FILE);
	}
	# get rid of header stuff - in index.html, everything between <body>
    # and <h1>; in notes.html, everything between <body> and <h2>
	$contents =~ s/<body>.*?<h(1|2)>/<body><div id="content"><h$1>/gs;
    # make publication date into regular paragraph
    $contents =~ s/<br \/><span class="xsmall">(.*)<\/span><\/h1>/<\/h1><p>$1<\/p>/g;
	# center copyright notice
	$contents =~ s/<div id="foot">(.*?)<\/div>/<center>$1<\/center>/gs;

	# replace unicode character references
	%replacements = (
                     "&\#133;"  => "&hellip;",
                     "&\#145;"  => "&lsquo;",
                     "&\#146;"  => "&rsquo;",
                     "&\#147;"  => "&ldquo;",
                     "&\#148;"  => "&rdquo;",
                     "&\#149;"  => "&bull;",
                     "&\#150;"  => "&minus;", 
                     "&\#257;"  => "a", 
                     "&\#261;"  => "a", 
                     "&\#263;"  => "c", 
                     "&\#269;"  => "c", 
                     "&\#281;"  => "e", 
                     "&\#299;"  => "i", 
                     "&\#321;"  => "L", 
                     "&\#322;"  => "l", 
                     "&\#324;"  => "n", 
                     "&\#333;"  => "o", 
                     "&\#345;"  => "r", 
                     "&\#346;"  => "S", 
                     "&\#347;"  => "s", 
                     "&\#351;"  => "s", 
                     "&\#363;"  => "u", 
                     "&\#365;"  => "u", 
                     "&\#369;"  => "u", 
                     "&\#378;"  => "z", 
                     "&\#380;"  => "z", 
                     "&\#381;"  => "Z", 
                     "&\#599;"  => "u", 
                     "&\#768;"  => "", 
                     "&\#769;"  => "", 
                     "&\#770;"  => "", 
                     "&\#771;"  => "", 
                     "&\#772;"  => "", 
                     "&\#773;"  => "", 
                     "&\#775;"  => "", 
                     "&\#803;"  => "", 
                     "&\#8209;" => "-", 
                     "&\#8600;" => "<img alt=\"southeast-arrow\" src=\"http:\/\/plato.stanford.edu\/symbols\/searrow.gif\">",
                     "<sup>&\#9484;<\/sup>" => "<img alt=\"left-corner-quote\" src=\"http:\/\/plato.stanford.edu\/symbols\/l-corner-quote.gif\">",
                     "<sup>&\#9488;<\/sup>" => "<img alt=\"right-corner-quote\" src=\"http:\/\/plato.stanford.edu\/symbols\/r-corner-quote.gif\">",
                     "&\#8463;" => "<img alt=\"hbar\" src=\"http:\/\/plato.stanford.edu\/symbols\/hbar.gif\">",
                     "&\#9633;" => "<img alt=\"Box\" src=\"http:\/\/plato.stanford.edu\/symbols\/Box.gif\">"
					 );
	while ( my ($ref, $rep) = each(%replacements) ) {
		$contents =~ s/$ref/$rep/g;
    }
	# write back to file
	open(FILE, "> $file") or die "Couldn't open $file to write"; 
	print FILE $contents;
	close(FILE);
}

# preprocess all the html files in the working (i.e., temp) directory
opendir(TEMPDIR, ".");
preprocess_html foreach (grep /.html?$/, readdir TEMPDIR);
closedir TEMPDIR;

system("html2ps -D -U -f $html2psrc -W b -o $pstemp index.html $blank");

if ($pdf) {system("ps2pdf -sPAPERSIZE=$papersize $pstemp $current/$entryname.pdf") || print "Created $entryname.pdf\n";};

if ($ps) {copy($pstemp, "$current/$entryname.ps") && print "Created $entryname.ps\n";};

# note: temporary directory will be deleted automatically on exit
